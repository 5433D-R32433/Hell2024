#version 460
#extension GL_EXT_ray_tracing : enable

layout(set = 0, binding = 0) uniform GlobalShaderData {
    mat4 projection;
    mat4 projectionInverse;
    mat4 view;
    mat4 viewInverse;
} globalShaderData;

struct RayPayload {
	vec3 color;
};

layout(location = 0) rayPayloadEXT RayPayload rayPayload;
layout(set = 0, binding = 3) uniform accelerationStructureEXT topLevelAS;

layout(set = 3, binding = 2, rgba8) uniform image2D outputImage;

void main() {

	mat4 proj = globalShaderData.projection;
	mat4 view = globalShaderData.view;
	mat4 projInverse = globalShaderData.projectionInverse;
	mat4 viewInverse = globalShaderData.viewInverse;

	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;
	vec4 origin = viewInverse * vec4(0,0,0,1);
	vec4 target = projInverse * vec4(d.x, d.y, 1, 1) ;		
	uint rayFlags = gl_RayFlagsOpaqueEXT;// | gl_RayFlagsCullFrontFacingTrianglesEXT;
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 10000.0;

	rayPayload.color = vec3(0);

	vec4 direction = viewInverse * vec4(normalize(target.xyz / target.w), 0);

	vec3 rayDirection = normalize(direction.xyz);
	vec3 rayOrigin = origin.xyz;
	
	traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, rayOrigin, tmin, rayDirection, tmax, 0);		

	vec4 outputColor = vec4(rayPayload.color, 1);
	imageStore(outputImage, ivec2(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y), outputColor);
}


