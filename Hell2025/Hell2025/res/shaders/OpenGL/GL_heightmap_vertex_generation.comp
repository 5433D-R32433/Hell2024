#version 450

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0, r16f) readonly uniform image2D heightmapImage;

struct Vertex {
    float position[3];
    float normal[3];
    float uv[2];
    float tangent[3];
};

layout (binding = 5, std430) buffer VertexBuffer {
    Vertex vertices[];
};

layout (binding = 6, std430) buffer IndexBuffer {
    uint indices[];
};

// Uniforms
uniform int u_heightMapWidth;
uniform int u_heightMapDepth;
uniform int u_chunkX;
uniform int u_chunkZ;
uniform int u_baseVertex;
uniform int u_baseIndex;

void main() {
    int chunkWidth = 33;
    int chunkDepth = 33;

    // Early out if invocation is outside the chunk's vertex range.
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    if (gid.x >= chunkWidth || gid.y >= chunkDepth) {
        return;
    }

    // Local coordinates within this chunk
    int localX = gid.x; // range [0..32]
    int localZ = gid.y; // range [0..32]

    // Compute vertex index
    int localIndex = localZ * 33 + localX;
    int vIdx = u_baseVertex + localIndex;

    int chunkSize = 32;

    int x = u_chunkX * chunkSize + localX; 
    int z = u_chunkZ * chunkSize + localZ;
    float heightVal = imageLoad(heightmapImage, ivec2(x, z)).r;

    // Position
    vertices[vIdx].position[0] = float(x);
    vertices[vIdx].position[1] = heightVal;
    vertices[vIdx].position[2] = float(z);

    // UVs
    vertices[vIdx].uv[0] = float(x) / float(256 - 1);
    vertices[vIdx].uv[1] = float(z) / float(256 - 1);

    // Neighbors
    float leftH  = imageLoad(heightmapImage, ivec2(max(x - 1, 0), z)).r;
    float rightH = imageLoad(heightmapImage, ivec2(min(x + 1, u_heightMapWidth - 1), z)).r;
    float downH  = imageLoad(heightmapImage, ivec2(x, max(z - 1, 0))).r;
    float upH    = imageLoad(heightmapImage, ivec2(x, min(z + 1, u_heightMapDepth - 1))).r;

    // Normals
    vec3 dx = vec3(1.0, 0.5 * (rightH - leftH), 0.0);
    vec3 dz = vec3(0.0, 0.5 * (upH - downH), 1.0);
    vec3 normal = normalize(cross(dz, dx));
    vertices[vIdx].normal[0] = normal.x;
    vertices[vIdx].normal[1] = normal.y;
    vertices[vIdx].normal[2] = normal.z;

    // Tangent
    vec3 tangent = normalize(vec3(1.0, rightH - leftH, 0.0));
    vertices[vIdx].tangent[0] = tangent.x;
    vertices[vIdx].tangent[1] = tangent.y;
    vertices[vIdx].tangent[2] = tangent.z;

    // Indices
    if (localX < 32 && localZ < 32) {

        // Quad index in row-major order inside the chunk
        int quadIndex = localZ * 32 + localX;
        int iOffset   = u_baseIndex + quadIndex * 6;

        // The four vertices of this quad
        uint v0 = uint(vIdx);
        uint v1 = uint(vIdx + 33);   // next row
        uint v2 = uint(vIdx + 1);    // next column
        uint v3 = uint(vIdx + 33 + 1);

        indices[iOffset + 0] = v0;
        indices[iOffset + 1] = v1;
        indices[iOffset + 2] = v2;
        indices[iOffset + 3] = v2;
        indices[iOffset + 4] = v1;
        indices[iOffset + 5] = v3;
    }
}
