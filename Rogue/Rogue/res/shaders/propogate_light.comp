#version 430 core

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout(rgba16f, binding = 1) uniform image3D imgOutput;

struct CloudPoint {
    vec4 position;
    vec4 normal;
    vec4 color;
};

layout(std430, binding = 1) readonly buffer vertices {
    vec4 Vertices[];
};

layout(std430, binding = 2) buffer pointCloudvertices {
    CloudPoint PointCloud[];
};

layout (location = 0) uniform int pointCloudSize;
layout (location = 1) uniform int vertexCount;
layout (location = 2) uniform bool skipEvenX;
layout (location = 3) uniform bool skipEvenY;
layout (location = 4) uniform bool skipEvenZ;
layout (location = 5) uniform mat4 doorMatrix;

struct Hit {
	bool found;
};

Hit TriIntersect(vec3 origin, vec3 direction, float rayMin, float rayMax, vec3 v0, vec3 v1, vec3 v2) {

	vec3 a = v0 - v1;
	vec3 b = v2 - v0;
	vec3 p = v0 - origin;
	vec3 n = cross(b, a);
	float r = dot(direction, n); 

	Hit hit;
	hit.found = false;

    //ignore back face
    if (r > 0) 
		return hit;    

	// some other early out
	if (abs(r) < 0.00001) 
		return hit;

	vec3 q = cross( p, direction );
	r = 1.0 / r;
	float u = dot( q, b )*r;
	float v = dot( q, a )*r;
	float t = dot( n, p )*r;

	if( u<0.0 || v<0.0 || (u+v)>1.0 ) 
		t = -1.0;

	if (t > rayMin && t < rayMax) {
		hit.found = true;
	}
	return hit;
}

bool AnyHit(vec3 origin, vec3 direction, float rayMin, float rayMax) {
	for (int i = 0; i < vertexCount; i+=3) {	
		vec3 v0 = Vertices[i + 0].xyz;
		vec3 v1 = Vertices[i + 1].xyz;
		vec3 v2 = Vertices[i + 2].xyz;
				
		// If the vertex belongs to the door, apply the door model matrix
		if (Vertices[i + 0].a == 1) {
			v0 = (doorMatrix * vec4(v0, 1.0)).xyz;
			v1 = (doorMatrix * vec4(v1, 1.0)).xyz;
			v2 = (doorMatrix * vec4(v2, 1.0)).xyz;
		}

		Hit hit = TriIntersect(origin, direction, rayMin, rayMax, v0, v1, v2);
		if (hit.found) { 
			return true;
		}
	}
	return false;
}

float distanceSquared( vec3 A, vec3 B ) {
    vec3 C = A - B;
    return dot( C, C );
}

void main() {

    const uint x = (gl_WorkGroupID.x * 4) + gl_LocalInvocationID.x;
    const uint y = (gl_WorkGroupID.y * 4) + gl_LocalInvocationID.y;
    const uint z = (gl_WorkGroupID.z * 4) + gl_LocalInvocationID.z;

	const float probeSpacing = 0.2;
	vec3 probePosition = vec3(x,y,z) * vec3(probeSpacing);
	const float maxDistance = 2.6;

	vec3 color = vec3(0);

	// Iterate every point in the cloud
	for (int i = 0; i < pointCloudSize; i++) {
	 
		CloudPoint point = PointCloud[i];

		// If the cloud point is not in darkness...
		if (point.color.rgb != vec3(0,0,0)) {
		
			// If the probe is within the max distance...
			float distanceToProbeSquared = distanceSquared(point.position.xyz, probePosition);
			if (distanceToProbeSquared < maxDistance * maxDistance) {	

				// If the point is not facing away from the probe...
				vec3 v = normalize(probePosition - point.position.xyz);
				float vdotn = dot(point.normal.xyz, v);
				if (vdotn < 0) {
					continue;
				}

				float distanceFromPointToProbe = sqrt(distanceToProbeSquared);

				// If the point has line of sight to the probe...
				if (!AnyHit(point.position.xyz, v, 0.000001, distanceFromPointToProbe)) {
					//color += point.color.rgb * (maxDistance - distanceFromPointToProbe) / maxDistance;
					//color += vdotn * point.color.rgb * (maxDistance - distanceFromPointToProbe) / maxDistance;
					//color += point.color.rgb * (maxDistance - distanceFromPointToProbe) * (maxDistance - distanceFromPointToProbe) / maxDistance;
					//color += vdotn * point.color.rgb * (maxDistance - distanceFromPointToProbe) * (maxDistance - distanceFromPointToProbe) / maxDistance;
					color += point.color.rgb / distanceFromPointToProbe;
					//color += vdotn * point.color.rgb;
				} 				 
			}
		}
		
	}
	float scale = 400;
	color = color / float(scale);

	// Mark probes as -1 if they have no light, that way they aren't interpolated in the lighting shader
	if (length(color) < 0.01) {
		color = vec3(-1);
	}

	imageStore(imgOutput, ivec3(x, y, z), vec4(color, 1));
}